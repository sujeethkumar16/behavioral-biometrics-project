import pandas as pd
import numpy as np
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import os

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

def load_and_preprocess_data():
    """
    Load and preprocess the dataset
    """
    try:
        df = pd.read_csv('../dataset/user_behavior.csv')
        
        X = df.drop('is_fraud', axis=1).values
        y = df['is_fraud'].values
        
        X = X.astype(np.float32)
        
        X = X.reshape((X.shape[0], 1, X.shape[1]))
        
        return X, y
    
    except Exception as e:
        print(f"Error loading/preprocessing data: {str(e)}")
        raise

class LSTMModel(nn.Module):
    """
    LSTM Model for binary classification
    """
    def __init__(self, input_size):
        super(LSTMModel, self).__init__()
        self.lstm = nn.LSTM(input_size, 64, batch_first=True)
        self.fc = nn.Linear(64, 1)
        self.sigmoid = nn.Sigmoid()
        
    def forward(self, x):
        out, _ = self.lstm(x)
        out = self.fc(out[:, -1, :])
        return self.sigmoid(out)

def train_model(X_train, y_train, input_size, epochs=10, batch_size=16, lr=0.001):
    """
    Train the LSTM model
    """
    try:
        model = LSTMModel(input_size).to(device)
        criterion = nn.BCELoss()
        optimizer = torch.optim.Adam(model.parameters(), lr=lr)
        
        X_train_tensor = torch.tensor(X_train, dtype=torch.float32).to(device)
        y_train_tensor = torch.tensor(y_train, dtype=torch.float32).view(-1, 1).to(device)
        
        for epoch in range(epochs):
            model.train()
            epoch_loss = 0.0
            
            for i in range(0, len(X_train_tensor), batch_size):
                X_batch = X_train_tensor[i:i + batch_size]
                y_batch = y_train_tensor[i:i + batch_size]
                
                optimizer.zero_grad()
                outputs = model(X_batch)
                loss = criterion(outputs, y_batch)
                loss.backward()
                optimizer.step()
                
                epoch_loss += loss.item()
            
            avg_loss = epoch_loss / (len(X_train_tensor) // batch_size)
            print(f'Epoch [{epoch + 1}/{epochs}], Average Loss: {avg_loss:.4f}')
        
        return model
    
    except Exception as e:
        print(f"Error during training: {str(e)}")
        raise

def evaluate_model(model, X_test, y_test):
    """
    Evaluate the model on test data
    """
    try:
        model.eval()
        with torch.no_grad():
            X_test_tensor = torch.tensor(X_test, dtype=torch.float32).to(device)
            y_pred = model(X_test_tensor)
            y_pred_class = (y_pred > 0.5).float().cpu().numpy()
            
        print("\nClassification Report:")
        print(classification_report(y_test, y_pred_class))
        
    except Exception as e:
        print(f"Error during evaluation: {str(e)}")
        raise

def save_model(model, path='../backend/pytorch_model.pth'):
    """
    Save the trained model
    """
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        torch.save(model.state_dict(), path)
        print(f"âœ… Model successfully saved to '{path}'")
        
    except Exception as e:
        print(f"Error saving model: {str(e)}")
        raise

def main():
    try:
        X, y = load_and_preprocess_data()
        
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, stratify=y, random_state=42
        )
        
        input_size = X.shape[2]
        model = train_model(X_train, y_train, input_size, epochs=20, batch_size=32)
        
        evaluate_model(model, X_test, y_test)
        
        save_model(model)
        
    except Exception as e:
        print(f"Error in main execution: {str(e)}")

if __name__ == "__main__":
    main()

